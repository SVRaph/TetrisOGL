#pragma once

#include <vector>
#include <iostream>
#include <cassert>
#include <GL/glut.h>  // GLUT, include glu.h and gl.h

#define PI 3.14159265f

typedef unsigned char uchar; // int between 0 and 255


void DrawCube5(float,float,uchar,uchar,uchar);
void DrawCube3(float,float,int);


const int NBTETRO=7;
// L Z S G T I O
const uchar COLOR[3*(NBTETRO+2)]=
  {
    0,0,0,
    255,255,255,
    200,125,0,
    12,100,200,
    65,32,123,
    200,0,200,
    150,150,150,
    0,200,20,
    200,150,20
  };

// Chaque forme est cod√©e sur 16 bools, chaque rotation est une forme 
const bool VSHAPE[16*4*NBTETRO]=
  {
    // L (4)
    0,1,0,0,
    0,1,0,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,1,1,
    0,1,0,0,
    0,0,0,0,

    0,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,0,0,

    0,0,0,0,
    0,0,1,0,
    1,1,1,0,
    0,0,0,0,

    // Z (2)
    0,0,0,0,
    1,1,0,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,0,1,0,
    0,1,1,0,
    0,1,0,0,

    0,0,0,0,
    1,1,0,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,0,1,0,
    0,1,1,0,
    0,1,0,0,

    // S (2)
    0,0,0,0,
    0,0,1,1,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,0,0,
    0,1,1,0,
    0,0,1,0,

    0,0,0,0,
    0,0,1,1,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,0,0,
    0,1,1,0,
    0,0,1,0,

    // G (4)
    0,0,1,0,
    0,0,1,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,0,0,
    0,1,1,1,
    0,0,0,0,

    0,1,1,0, 
    0,1,0,0,
    0,1,0,0,
    0,0,0,0,

    0,0,0,0,
    1,1,1,0,
    0,0,1,0,
    0,0,0,0,

    // T (4)
    0,0,0,0,
    0,1,0,0,
    1,1,1,0,
    0,0,0,0,

    0,1,0,0,
    0,1,1,0,
    0,1,0,0,
    0,0,0,0,

    0,0,0,0,
    1,1,1,0,
    0,1,0,0,
    0,0,0,0,

    0,0,1,0,
    0,1,1,0,
    0,0,1,0,
    0,0,0,0,

    // I (2)
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    0,0,0,0,
    1,1,1,1,
    0,0,0,0,
    0,0,0,0,

    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    0,0,0,0,
    1,1,1,1,
    0,0,0,0,
    0,0,0,0,

    // O (1)
    0,0,0,0,
    0,1,1,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,1,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,1,0,
    0,1,1,0,
    0,0,0,0,

    0,0,0,0,
    0,1,1,0,
    0,1,1,0,
    0,0,0,0
  };

